{"meta":{"title":"Flyreve's Blog","subtitle":"F的储物间","description":null,"author":"flyreve","url":"https://flyreve.github.io","root":"/"},"pages":[{"title":"测试","date":"2019-04-27T05:31:51.000Z","updated":"2020-04-24T09:14:22.537Z","comments":true,"path":"custom/index.html","permalink":"https://flyreve.github.io/custom/index.html","excerpt":"","text":""},{"title":"类别","date":"2019-04-27T05:31:51.000Z","updated":"2020-04-24T09:14:22.537Z","comments":true,"path":"categories/index.html","permalink":"https://flyreve.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-04-27T05:31:01.000Z","updated":"2020-04-24T09:14:22.558Z","comments":false,"path":"tags/index.html","permalink":"https://flyreve.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Angular pdd","slug":"Angular-pdd","date":"2020-05-15T03:43:40.000Z","updated":"2020-05-16T04:23:03.175Z","comments":true,"path":"2020-05-15/cka937xat000cxktp3g1y6dtl/","link":"","permalink":"https://flyreve.github.io/2020-05-15/cka937xat000cxktp3g1y6dtl/","excerpt":"","text":"一，框架对比 Vue：轻量级，快速开发，较小工程 React：所有都是Js，依赖各种开源类库 Angular：大型项目，多人合作开发，开箱即用 二，安装 npm i -g @angular/cli ng version ng new projectName ng serve 三，项目目录 版本号：~：锁定版本号前两位、^：锁定版本号前一位 四，Typescript 五，其他 浏览器插件：Augury 课程目录2-2 工程源码文件结构 多环境 组件装饰器 @Component：标记一个class为组件 模块装饰器@NgModule 2-3 【初识组件】 顶部TabBar 前端宏编程 *ngFor 2-4 【接口Interface Flex】 Interface类型命名，可选类型：函数、索引、类 手机真机调试：ng serve –host 0.0.0.0 123456789101112131415161718192021222324252627282930313233// 类interface TopMenu &#123; titel: string; link?: string; readonly id: number;&#125;// 函数interface AddFunc &#123; (x: number, y: number): number&#125;// 索引interface Dict &#123; [key: string]&#125;class obj &#123; menus: TopMenu[] = [ &#123; title: '1', id: 1 &#125; ]; add: AddFunc = (x, y) =&gt; x + y dict: Dict = &#123; a: '1', b: '2' &#125; constructor() &#123; console.log(this.dict.a) &#125; &#125; 2-5 【ngFor指令 事件的处理和样式绑定】 获取第一个和最后一个 获取奇和偶 trackBy：menu ? menu.id : null [class.className] = &quot;false&quot; []：数据绑定，()：事件绑定 2-6 【组件封装】 ng generate component 路径名称/组件名（驼峰） ng g c 路径名称/组件名 使用index.ts 2-7 【ngif 组件的输入输出】 123&lt;div *ngIf=\"条件表达式; then thenTemplate; else elseContent\" /&gt;&lt;ng-template #thenTemplate /&gt;&lt;ng-template #elseContent /&gt; @Input装饰器 @Output装饰器 EventEmitter()：事件发射器 2-8 样式绑定的几种方式 3-1 组件生命周期（1） 3-2 组件生命周期（2） &lt;ng-content /&gt; 同slot 3-3 在组件类中引用模板","categories":[],"tags":[{"name":"Angular","slug":"Angular","permalink":"https://flyreve.github.io/tags/Angular/"}],"author":"flyreve"},{"title":"","slug":"文本换行样式","date":"2020-04-24T09:14:22.537Z","updated":"2020-04-24T15:58:24.920Z","comments":true,"path":"2020-04-24/cka937xbe0018xktpw873oiky/","link":"","permalink":"https://flyreve.github.io/2020-04-24/cka937xbe0018xktpw873oiky/","excerpt":"","text":"title: 文本换行样式author: flyrevetags: HTML/CSScategories: 技术date: 2019-08-16 10:54:00 前提：块级元素，有宽度 单行文本溢出省略12345&#123; white-space:nowrap; //代表文字不自动换行 overflow:hidden; //代表溢出隐藏 text-overflow:ellipsis; //代表溢出省略号（多余文本隐藏）&#125; 多行溢出省略123456&#123; overflow: hidden; display: -webkit-box; -webkit-box-orient: vertical; /*使用该属性的前提是display:box;*/ -webkit-line-clamp: 4; /*显示的行数*/&#125;","categories":[],"tags":[]},{"title":"Typescript","slug":"Typescript","date":"2019-09-23T02:46:52.000Z","updated":"2020-04-24T09:14:22.535Z","comments":true,"path":"2019-09-23/cka937xar0008xktpfx1n6043/","link":"","permalink":"https://flyreve.github.io/2019-09-23/cka937xar0008xktpfx1n6043/","excerpt":"","text":"12str!.subbstring// !表示str类型不能为null never没有返回值使用情况：1，无限循环，代码不可到达 2，抛出异常 void:有返回值，期待返回 返回为空，代码会继续运行 123function loopForver()：never &#123; while(true)&#123;&#125;&#125;","categories":[],"tags":[],"author":"flyreve"},{"title":"Angular Bug整理","slug":"Angular-Bug整理","date":"2019-08-30T03:45:00.000Z","updated":"2020-04-24T09:14:22.534Z","comments":true,"path":"2019-08-30/cka937xak0002xktp4zuy8qnj/","link":"","permalink":"https://flyreve.github.io/2019-08-30/cka937xak0002xktp4zuy8qnj/","excerpt":"","text":"Angular CLI version is greater than local version 问题：全局Angular Cli版本大于本地版本 解决： 全局降级 npm uninstall -g angular-cli npm cache clean --force清除缓存，确保卸载干净 npm install -g @angular/cli@latest 本地升级 npm uninstall --save-dev angular-cli npm install --save-dev @angular/cli@latest npm install __","categories":[{"name":"前端","slug":"前端","permalink":"https://flyreve.github.io/categories/前端/"}],"tags":[{"name":"Angular","slug":"Angular","permalink":"https://flyreve.github.io/tags/Angular/"}],"author":"flyreve"},{"title":"Hexo Bug整理","slug":"Hexo-Bug整理","date":"2019-08-30T03:40:00.000Z","updated":"2020-04-24T09:14:22.535Z","comments":true,"path":"2019-08-30/cka937xap0007xktp9luygmy2/","link":"","permalink":"https://flyreve.github.io/2019-08-30/cka937xap0007xktp9luygmy2/","excerpt":"","text":"Template render error 当运行hexo serve时，报如下错误 原因：当文章中有}}时,且这两个括号未被代码块包含，解析会出问题 解决：123&#123;% raw %&#125; 含有双大括号的内容&#123;% endraw %&#125;","categories":[{"name":"技术","slug":"技术","permalink":"https://flyreve.github.io/categories/技术/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://flyreve.github.io/tags/Hexo/"}],"author":"flyreve"},{"title":"Vue中监听窗口变化，实现页面响应式","slug":"Vue中监听窗口变化，实现页面响应式","date":"2019-08-20T08:12:00.000Z","updated":"2020-04-24T09:14:22.535Z","comments":true,"path":"2019-08-20/cka937xaz000ixktpa267r7sc/","link":"","permalink":"https://flyreve.github.io/2019-08-20/cka937xaz000ixktpa267r7sc/","excerpt":"","text":"利用onresize 事件会在窗口或框架被调整大小时发生的机制，获取动态的窗口宽高 网页可见区域宽：document.body.clientWidth网页可见区域高：document.body.clientHeight网页可见区域宽：document.body.offsetWidth (包括边线的宽)网页可见区域高：document.body.offsetHeight (包括边线的宽) 1234567891011121314151617181920212223242526272829303132data:&#123; screenWidth: document.body.clientWidth&#125;// 在页面mounted时，挂载window.onresize方法mounted () &#123; const that = this window.onresize = () =&gt; &#123; return (() =&gt; &#123; window.screenWidth = document.body.clientWidth that.screenWidth = window.screenWidth &#125;)() &#125;&#125;// 监听screenWidth属性值的变化，打印并观察screenWidth发生变化的值：watch:&#123; screenWidth(val)&#123; // 为了避免频繁触发resize函数导致页面卡顿，使用定时器 if(!this.timer)&#123; // 一旦监听到的screenWidth值改变，就将其重新赋给data里的screenWidth this.screenWidth = val this.timer = true let that = this setTimeout(function()&#123; // 打印screenWidth变化的值 console.log(that.screenWidth) that.timer = false &#125;,400) &#125; &#125;&#125; mounted () { const that = this window.onresize = () =&gt; { return (() =&gt; { window.screenWidth = document.body.clientWidth that.screenWidth = window.screenWidth })() } }","categories":[{"name":"前端","slug":"前端","permalink":"https://flyreve.github.io/categories/前端/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://flyreve.github.io/tags/Vue/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://flyreve.github.io/tags/JavaScript/"}],"author":"flyreve"},{"title":"CSS 实现元素水平/垂直居中","slug":"CSS-实现元素水平-垂直居中","date":"2019-08-17T05:16:58.000Z","updated":"2020-04-24T09:14:22.534Z","comments":true,"path":"2019-08-17/cka937xbh001fxktpjce0ihiw/","link":"","permalink":"https://flyreve.github.io/2019-08-17/cka937xbh001fxktpjce0ihiw/","excerpt":"","text":"水平居中 摘自https://www.w3cplus.com/css/elements-horizontally-center-with-css.html 1. margin: 0 auto1234.class &#123; width: 100px; margin: 0 auto&#125; 优点：实现方法简单易懂，浏览器兼容性强； 缺点：扩展性差，无法自适应未知项情况 2. text-align: center123456.father-class &#123; text-align: center; .son-class &#123; display: inline-blick; // 行内元素 &#125;&#125; 优点：简单易懂，扩展性强； 缺点：需要额外处理inline-block的浏览器兼容性。 3. float&amp;position123456789101112131415161718192021.page-div &#123; float: left; width: 100%; overflow: hidden; position: relative; ul &#123; clear: left; float: left; position: relative; left: 50%; /*整个分页向右移动宽度的50%*/ text-align: center; li &#123; line-height: 25px; margin: 0 5px; display: block; float: left; position: relative; right: 50%; /*将整个分页项向左边移动宽度的50%*/ &#125; &#125;&#125; 优点：兼容性强，扩展性强； 缺点：实现原理较复杂。 4. positon: absolute 有宽度： 123456.class &#123; positon: absolute; width: 200px; left: 50%; margin-left: -100px;&#125; 无宽度： 1234567891011121314.pagination &#123; position: relative;&#125;.pagination ul &#123; position: absolute; left: 50%;&#125;.pagination li &#123; line-height: 25px; margin: 0 5px; float: left; position: relative;/*注意，这里不能是absolute*/ right: 50%;&#125; 优点：扩展性强，兼容性强; 缺点：理解性难。 5. display: flex12345678910111213141516171819202122.pagination &#123; display: -webkit-box; -webkit-box-orient: horizontal; -webkit-box-pack: center; display: -moz-box; -moz-box-orient: horizontal; -moz-box-pack: center; display: -o-box; -o-box-orient: horizontal; -o-box-pack: center; display: -ms-box; -ms-box-orient: horizontal; -ms-box-pack: center; display: box; box-orient: horizontal; box-pack: center;&#125;.pagination li &#123; line-height: 25px; margin: 0 5px;float: left;&#125; 优点：实现便捷，扩展性强 缺点：兼容性差。6. width: fit-content 123456789101112.pagination ul &#123; width: -moz-fit-content; width:-webkit-fit-content; width: fit-content; margin-left: auto; margin-right: auto;&#125;.pagination li &#123; line-height: 25px; margin: 0 5px; float: left;&#125; 优点：简单易懂，扩展性强; 缺点：浏览器兼容性差 垂直居中 摘自https://www.cnblogs.com/hutuzhu/p/4450850.html 1. table-cell12345.box &#123; display: table-cell; vertical-align: middle; text-align: center&#125; 2. display: flex12345.box &#123; display: flex; justify-content: center; align-items: Center;&#125; 3. 绝对定位和负边距12345678910111213.father-box &#123; position: relative; .son-box &#123; position: absolute; width: 100px; height: 50px; top: 50%; left: 50px; margin-left: -50%; margin-top: -25px; text-align: center; &#125;&#125; 4. 绝对定位和0123456789.box span &#123; width: 50%; height: 50%; background: #000; overflow: auto; margin: auto; position: absolute; top: 0; left: 0; bottom: 0; right: 0;&#125; 这种方法跟上面的有些类似，但是这里是通过margin:auto和top,left,right,bottom都设置为0实现居中。不过这里得确定内部元素的高度，可以用百分比，比较适合移动端。 5. translate12345678.box span &#123; position: absolute; top: 50%; left: 50%; width: 100%; transform: translate(-50%, -50%); text-align: center;&#125; 6. display: inline-block12345678910111213141516.box7&#123; text-align:center; font-size:0;&#125;.box7 span&#123; vertical-align:middle; display:inline-block; font-size:16px;&#125;.box7:after&#123; content:''; width:0; height:100%; display:inline-block; vertical-align:middle;&#125; 通过:after来占位 7.display: flex和margin：auto12345.box8&#123; display: flex; text-align: center;&#125;.box8 span&#123;margin: auto;&#125; 8. display: -webkit-box1234567.box9&#123; display: -webkit-box; -webkit-box-pack:center; -webkit-box-align:center; -webkit-box-orient: vertical; text-align: center&#125; 9. display: -webkit-box12345678910.floater &#123; float:left; height:50%; margin-bottom:-120px;&#125;.content &#123; clear:both; height:240px; position:relative;&#125;","categories":[],"tags":[],"author":"flyreve"},{"title":"DIV 固定宽高比","slug":"DIV固定宽高比","date":"2019-08-16T07:15:00.000Z","updated":"2020-04-24T09:14:22.534Z","comments":true,"path":"2019-08-16/cka937xao0006xktpyeya6ywy/","link":"","permalink":"https://flyreve.github.io/2019-08-16/cka937xao0006xktpyeya6ywy/","excerpt":"","text":"html 1&lt;div class=\"wrapper\"&gt;&lt;/div&gt; css 123456.wrapper &#123; overflow: hidden; width: 100%; height: 0; padding-bottom: 25%&#125;","categories":[{"name":"前端","slug":"前端","permalink":"https://flyreve.github.io/categories/前端/"}],"tags":[{"name":"HTML/CSS","slug":"HTML-CSS","permalink":"https://flyreve.github.io/tags/HTML-CSS/"}],"author":"flyreve"},{"title":"DIV 自适应高度 自动填充剩余高度","slug":"div-自适应高度-自动填充剩余高度","date":"2019-08-16T07:07:00.000Z","updated":"2020-04-24T09:14:22.535Z","comments":true,"path":"2019-08-16/cka937xb1000kxktpxuiug8xm/","link":"","permalink":"https://flyreve.github.io/2019-08-16/cka937xb1000kxktpxuiug8xm/","excerpt":"","text":"方案1 html 1234&lt;div class=\"outer\"&gt; &lt;div class=\"A\"&gt; 头部DIV &lt;/div&gt; &lt;div class=\"B\"&gt;下部DIV &lt;/div&gt;&lt;/div&gt; css 1234567891011121314151617181920212223html,body &#123; height: 100%; padding: 0; margin: 0; &#125;.outer &#123; height: 100%; padding: 100px 0 0; box-sizing: border-box ; position: relative; &#125;.A &#123; height: 100px; background: #BBE8F2; position: absolute; top: 0 ; left: 0 ; width: 100%; &#125;.B &#123; height: 100%; background: #D9C666; &#125; 方案2 html 1234&lt;div class=\"outer\"&gt; &lt;div class=\"A\"&gt;头部DIV&lt;/div&gt; &lt;div class=\"B\"&gt;下部DIV&lt;/div&gt;&lt;/div&gt; css 12345html,body &#123; height: 100%; padding: 0; margin: 0; &#125;.outer &#123; height: 100%; padding: 100px 0 0; box-sizing: border-box ; &#125;.A &#123; height: 100px; margin: -100px 0 0; background: #BBE8F2; &#125;.B &#123; height: 100%; background: #D9C666; &#125;","categories":[{"name":"前端","slug":"前端","permalink":"https://flyreve.github.io/categories/前端/"}],"tags":[{"name":"HTML/CSS","slug":"HTML-CSS","permalink":"https://flyreve.github.io/tags/HTML-CSS/"}],"author":"flyreve"},{"title":"DIV 自适应宽度","slug":"DIV自适应宽度","date":"2019-08-16T06:59:00.000Z","updated":"2020-04-24T09:14:22.534Z","comments":true,"path":"2019-08-16/cka937xba0011xktpv1gsq5qx/","link":"","permalink":"https://flyreve.github.io/2019-08-16/cka937xba0011xktpv1gsq5qx/","excerpt":"","text":"三栏布局：左右固定，中间自适应 float html 12345&lt;div class=\"outer\"&gt; &lt;div class=\"left\"&gt; 左 &lt;/div&gt; &lt;div class=\"right\"&gt;右&lt;/div&gt; &lt;div class=\"center\"&gt;中&lt;/div&gt;&lt;/div&gt; css 12.outer.left &#123;float: left;&#125;.outer.right &#123;float: right;&#125; position html 12345&lt;div class=\"pos\"&gt; &lt;div class=\"left\"&gt; 左 &lt;/div&gt; &lt;div class=\"center\"&gt;中&lt;/div&gt; &lt;div class=\"right\"&gt;右&lt;/div&gt;&lt;/div&gt; css 1234.pos &#123;position: relative;&#125;.pos .left &#123;position: absolute;left: 0; &#125;pos .right &#123;position: absolute; right: 0;&#125;.pos .center &#123;position: absolute;left: 80px;right: 80px;&#125; flex html 12345&lt;div class=\"flex\"&gt; &lt;div class=\"left\"&gt; 左 &lt;/div&gt; &lt;div class=\"center\"&gt;中&lt;/div&gt; &lt;div class=\"right\"&gt;右&lt;/div&gt;&lt;/div&gt; css 12.flex &#123;display: flex;&#125;.flex .center &#123;flex: 1;&#125; table html 12345&lt;div class=\"table\"&gt; &lt;div class=\"left\"&gt; 左 &lt;/div&gt; &lt;div class=\"center\"&gt;中&lt;/div&gt; &lt;div class=\"right\"&gt;右&lt;/div&gt;&lt;/div&gt; css 12 .table &#123;width: 100%;display: table;&#125;.table .center,.right,.left &#123;display: table-cell;&#125;","categories":[{"name":"前端","slug":"前端","permalink":"https://flyreve.github.io/categories/前端/"}],"tags":[{"name":"HTML/CSS","slug":"HTML-CSS","permalink":"https://flyreve.github.io/tags/HTML-CSS/"}],"author":"flyreve"},{"title":"前端使用SSE","slug":"前端使用SSE","date":"2019-08-16T06:38:00.000Z","updated":"2020-04-24T09:14:22.537Z","comments":true,"path":"2019-08-16/cka937xbk001mxktplqqc6mjr/","link":"","permalink":"https://flyreve.github.io/2019-08-16/cka937xbk001mxktplqqc6mjr/","excerpt":"","text":"摘自http://www.ruanyifeng.com/blog/2017/05/server-sent_events.html EventSource 对象SSE 的客户端 API 部署在EventSource对象上。下面的代码可以检测浏览器是否支持 SSE。 123if ('EventSource' in window) &#123; // ...&#125; 使用 SSE 时，浏览器首先生成一个EventSource实例，向服务器发起连接。1var source = new EventSource(url); 上面的url可以与当前网址同域，也可以跨域。跨域时，可以指定第二个参数，打开withCredentials属性，表示是否一起发送 Cookie。1var source = new EventSource(url, &#123; withCredentials: true &#125;); EventSource实例的readyState属性，表明连接的当前状态。该属性只读，可以取以下值。 0：相当于常量EventSource.CONNECTING，表示连接还未建立，或者断线正在重连。 1：相当于常量EventSource.OPEN，表示连接已经建立，可以接受数据。 2：相当于常量EventSource.CLOSED，表示连接已断，且不会重连。 基本用法连接一旦建立，就会触发open事件，可以在onopen属性定义回调函数。 12345678source.onopen = function (event) &#123; // ...&#125;;// 另一种写法source.addEventListener('open', function (event) &#123; // ...&#125;, false); 客户端收到服务器发来的数据，就会触发message事件，可以在onmessage属性的回调函数。 12345678910source.onmessage = function (event) &#123; var data = event.data; // handle message&#125;;// 另一种写法source.addEventListener('message', function (event) &#123; var data = event.data; // handle message&#125;, false); 上面代码中，事件对象的data属性就是服务器端传回的数据（文本格式）。 如果发生通信错误（比如连接中断），就会触发error事件，可以在onerror属性定义回调函数。 12345678source.onerror = function (event) &#123; // handle error event&#125;;// 另一种写法source.addEventListener('error', function (event) &#123; // handle error event&#125;, false); close方法用于关闭 SSE 连接。 1source.close(); 自定义事件默认情况下，服务器发来的数据，总是触发浏览器EventSource实例的message事件。开发者还可以自定义 SSE 事件，这种情况下，发送回来的数据不会触发message事件。 1234source.addEventListener('foo', function (event) &#123; var data = event.data; // handle message&#125;, false);","categories":[{"name":"前端","slug":"前端","permalink":"https://flyreve.github.io/categories/前端/"}],"tags":[{"name":"网络","slug":"网络","permalink":"https://flyreve.github.io/tags/网络/"}],"author":"flyreve"},{"title":"Firefox主页被篡改","slug":"Firefox主页被篡改","date":"2019-08-16T03:06:00.000Z","updated":"2020-04-24T09:14:22.534Z","comments":true,"path":"2019-08-16/cka937xaf0000xktprsccfpfm/","link":"","permalink":"https://flyreve.github.io/2019-08-16/cka937xaf0000xktprsccfpfm/","excerpt":"","text":"1. 地址栏输入1about:support 2.找到配置文件夹并进入 3.关闭并找到prefs.js和user.js,右键查看属性，若是只读，则去掉 4.查找流氓主页名称行，并删除","categories":[{"name":"其他","slug":"其他","permalink":"https://flyreve.github.io/categories/其他/"}],"tags":[{"name":"其他","slug":"其他","permalink":"https://flyreve.github.io/tags/其他/"}],"author":"flyreve"},{"title":"Git使用","slug":"Git使用","date":"2019-08-13T09:09:00.000Z","updated":"2020-04-24T10:07:39.363Z","comments":true,"path":"2019-08-13/cka937xau000dxktpxgnzwkqf/","link":"","permalink":"https://flyreve.github.io/2019-08-13/cka937xau000dxktpxgnzwkqf/","excerpt":"","text":"1. 创建本地版本库 新建文件夹TEST作为我们的仓库 2. 初始化git 将项目粘贴到本地仓库并初始化 把项目添加到Git仓库（git add .把该目录下的所有文件添加到仓库，） 利用git status查看当前状态 用git commit提交项目 3. 创建SSH KEY$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot; //youremail@example.com为你注册git的邮箱地邮箱 创建完成后密钥在C:\\Users\\admin.ssh\\id_rsa.pub 4. 在Github上添加本地密钥5. 在Gtihub上创建Git仓库6. 将Gtihub上的仓库与本地仓库进行关联 ps：origin后面是Github上创建好的仓库的地址 7. 将本地仓库里的内容推送到远程仓库$ git push -u origin master 第一次仓库为空时需要加-u，以后仓库有内容就不需要了 $ $ git pull --rebase origin master 有时远程仓库新增了文件，push将不成功，需要先拉取 8. 提交修改后的代码git add . 将本地的修改保存到缓存区 git commit -m &quot;描述&quot; 将本地缓存区的内容提交到本地仓库 git push 将本地代码推送到git 新建分支与拉取分支1，在线上新建一个分支 ‘new-branch’ git pull 2，本地拉取新分支 git checkout new-branch 3，切换分支 合并分支git checkout master 1，切换到主分支：master git merge origin/new-branch 或者 git merge new-branch 2，将new-branch分支合并 git push 3，提交master分支 GIT命令git log 查看版本记录 git add . 将仓库文件内的所有文件加入仓库 git status 查看仓库状态 git commit -m “描述” 提交版本 git checkout xxx 穿越到指定的历史节点 command 1 &amp;&amp; command 2 command1执行成功后再执行command2 git clone xxxxxxxx git rm -rf –cached xxxx/xx 清除缓存","categories":[{"name":"技术","slug":"技术","permalink":"https://flyreve.github.io/categories/技术/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://flyreve.github.io/tags/Git/"}],"author":"flyreve"},{"title":"ES6","slug":"javascript_ES6","date":"2019-07-04T08:59:00.000Z","updated":"2020-04-24T09:14:22.536Z","comments":true,"path":"2019-07-04/cka937xbg001cxktpdbxz0gqb/","link":"","permalink":"https://flyreve.github.io/2019-07-04/cka937xbg001cxktpdbxz0gqb/","excerpt":"","text":"let​ let只在{}域内存在 const​ constant：一旦定义永远不会改变 变量的结构赋值数组12var arr = [1,2,3];var [a, b, c='default', d='default'] = arr; 对象12345var obj = &#123; a:1, b:2,&#125;let &#123;c, b&#125; = obj; 其他12let [a, b, c] = 'Yo.';let &#123;length&#125; = 'Yo.'; 新增字符串方法12345'ABC'.includes('A');//返回boolean值，是否包含‘A’'ABC'.indexof('A') != -1;'ABC'.startsWith('A');//返回boolean值，是否以‘A’开头'ABC'.endsWith('A');//返回boolean值，是否以‘A’结尾'ABC'.repeat(n);//字符串重复n次 模板字符串123456789let tpl2 = ' &lt;div&gt; &lt;span&gt;$&#123;title + ' &lt;span&gt; $&#123;1234&#125;&lt;/span&gt; '&#125;&lt;/span&gt; &lt;/div&gt;';","categories":[{"name":"技术","slug":"技术","permalink":"https://flyreve.github.io/categories/技术/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://flyreve.github.io/tags/JavaScript/"}]},{"title":"Vuex中modules使用","slug":"vue_Vuex Modules","date":"2019-07-04T07:29:09.000Z","updated":"2020-04-24T09:14:22.536Z","comments":true,"path":"2019-07-04/cka937xbd0015xktp6ngpusdk/","link":"","permalink":"https://flyreve.github.io/2019-07-04/cka937xbd0015xktp6ngpusdk/","excerpt":"","text":"12345const actions=&#123; editName(options,payload)&#123; console.log(options) &#125;&#125; options对象属性： commit 用于调用mutation，当前模块和其他模块； dispatch 用于调用action，当前模块和其他模块； getters 用于获取当前模块getter； state 用于获取当前模块state； rootState 用于获取其它模块state； rootGetters 用于获取其他模块getter； 调用根空间action 12345678910111213141516const actions=&#123; editName(&#123;dispatch&#125;,payload)&#123; dispatch('log',&#123;txt:'hello world'&#125;,&#123;root:true&#125;) &#125;, log()&#123; console.log(123) &#125;&#125;//根空间actions:&#123; log(&#123;&#125;,&#123;txt&#125;)&#123; console.log(txt) &#125;&#125; 触发其他模块的mutation动态更新state，则需要借助参数root 根模块index. 1234567891011121314151617181920212223242526272829import Home from './modules/home' import About from './modules/about' export default &#123; modules:&#123; Home, About, &#125;, state:&#123; time:new Date().getTime() &#125;, getters:&#123; getFullYear:state=&gt; new Date(state.time).getFullYear() &#125;, mutations:&#123; updateTime(state,payload)&#123; state.time=payload.time &#125; &#125;, actions:&#123; updateTime(&#123;commit&#125;,payload)&#123; commit('updateTime',payload) &#125;, log(&#123;&#125;,&#123;txt&#125;)&#123; console.log(txt) &#125; &#125;,&#125; 模块about.js 12345678910111213141516171819202122const state=&#123; componey:'one',&#125;const mutations=&#123; changeComponey(state,n)&#123; state.componey=n &#125;&#125;const actions=&#123; editName(options,payload)&#123; console.log(options) &#125;&#125;export default &#123; namespaced:true, state, mutations, actions,&#125; 模块home.js 1234567891011121314151617181920212223242526272829const state=&#123; username:'wbiokr', sex:'man'&#125;const getters=&#123; word:state=&gt;`My name is $&#123;state.username&#125;`&#125;const mutations=&#123; editName(state,n)&#123; state.username=n &#125;&#125;const actions=&#123; editName(&#123;commit,rootState&#125;,payload)&#123; commit('About/changeComponey','newComponey',&#123;root:true&#125;) //此处是重点 console.log(rootState.About) &#125;&#125;export default &#123; namespaced:true, state, getters, mutations, actions,&#125;","categories":[{"name":"技术","slug":"技术","permalink":"https://flyreve.github.io/categories/技术/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://flyreve.github.io/tags/Vue/"}]},{"title":"图片懒加载","slug":"html_lazyload","date":"2019-07-04T06:59:01.000Z","updated":"2020-04-24T09:14:22.536Z","comments":true,"path":"2019-07-04/cka937xb3000oxktpc2fx0fon/","link":"","permalink":"https://flyreve.github.io/2019-07-04/cka937xb3000oxktpc2fx0fon/","excerpt":"","text":"1，概念​ 使图片仅在浏览器当前视图的情况下，加载图片，减少图片请求数。 2，解决方案 传统解决方案 ​ 在img的src属性里存放两个属性，一个为伪属性（存放空白图片），一个为original（存放实际图片），当页面滚动时，遍历当前页面需要懒加载的图片，判断图片是否在当前可视视窗下，若是，则用真实src代替伪属性。 可优化点 通过页面滚动时间的间隔来判断是否进行筛选动作 预加载，提前加载屏幕前后的图片 首先利用span元素占位，判断图片是否在当前可视视窗下，若是，使用img替换span，并加载img中伪元素中的低质量图片，再加载真实的高质量图片 其他","categories":[{"name":"技术","slug":"技术","permalink":"https://flyreve.github.io/categories/技术/"}],"tags":[{"name":"HTML/CSS","slug":"HTML-CSS","permalink":"https://flyreve.github.io/tags/HTML-CSS/"}]},{"title":"生命周期","slug":"vue_Lifecycle Hooks","date":"2019-07-04T06:49:00.000Z","updated":"2020-04-24T09:14:22.536Z","comments":true,"path":"2019-07-04/cka937xbj001jxktp4d2gqjeo/","link":"","permalink":"https://flyreve.github.io/2019-07-04/cka937xbj001jxktp4d2gqjeo/","excerpt":"","text":"Vue一共有10个生命周期函数，我们可以利用这些函数在vue的每个阶段都进行操作数据或者改变内容。 - 123456789101112131415161718192021222324252627282930beforeCreate:function()&#123; console.log('1-beforeCreate 初始化之前');&#125;,created:function()&#123; console.log('2-created 创建完成');&#125;,beforeMount:function()&#123; console.log('3-beforeMount 挂载之前');&#125;,mounted:function()&#123; console.log('4-mounted 被创建');&#125;,beforeUpdate:function()&#123; console.log('5-beforeUpdate 数据更新前');&#125;,updated:function()&#123; console.log('6-updated 被更新后');&#125;,activated:function()&#123; console.log('7-activated');&#125;,deactivated:function()&#123; console.log('8-deactivated');&#125;,beforeDestroy:function()&#123; console.log('9-beforeDestroy 销毁之前');&#125;,destroyed:function()&#123; console.log('10-destroyed 销毁之后')&#125;","categories":[{"name":"技术","slug":"技术","permalink":"https://flyreve.github.io/categories/技术/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://flyreve.github.io/tags/Vue/"}]},{"title":"vue课程笔记","slug":"vue_Lesson Note","date":"2019-05-10T06:14:41.000Z","updated":"2020-04-24T09:14:22.536Z","comments":true,"path":"2019-05-10/cka937xb7000vxktpaqcmtnci/","link":"","permalink":"https://flyreve.github.io/2019-05-10/cka937xb7000vxktpaqcmtnci/","excerpt":"","text":"第二章 Vue起步2-1 课程学习方法2-2 使用Vue.js实现Hello World2-3 使用Vue.js实现TodoList2-4 MVVM模式 MVP模式和MVVM模式 2-5 前端组件化2-6 使用组件化思想修改TodoList 全局组件（无需注册直接使用） 123Vue.component(&quot;TodoItem&quot;, &#123; template: &quot;&lt;li&gt;&lt;/li&gt;&quot;&#125;) 局部组件（需要在Vue实例中注册使用） 123var TodoItem = &#123; template: &quot;&lt;li&gt;&lt;/li&gt;&quot;&#125; 2-7 简单的组件间传值2-8 章小节","categories":[{"name":"技术","slug":"技术","permalink":"https://flyreve.github.io/categories/技术/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://flyreve.github.io/tags/Vue/"}]},{"title":"样式重置","slug":"html_CSS Reset","date":"2019-05-09T06:49:00.000Z","updated":"2020-04-24T09:14:22.536Z","comments":true,"path":"2019-05-09/cka937xb5000qxktp1tg73hnl/","link":"","permalink":"https://flyreve.github.io/2019-05-09/cka937xb5000qxktp1tg73hnl/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132body,div,dl,dt,dd,ul,ol,li,h1,h2,h3,h4,h5,h6,pre,form,fieldset,input,textarea,p,blockquote,th,td &#123; padding: 0; margin: 0;&#125;table &#123; border-collapse: collapse; border-spacing: 0;&#125;fieldset,img &#123; border: 0;&#125;address,caption,cite,code,dfn,em,strong,th,var &#123; font-weight: normal; font-style: normal;&#125;ol,ul &#123; list-style: none;&#125;caption,th &#123; text-align: left;&#125;h1,h2,h3,h4,h5,h6 &#123; font-weight: normal; font-size: 100%;&#125;q:before,q:after &#123; content:”;&#125;abbr,acronym &#123; border: 0;&#125;","categories":[{"name":"技术","slug":"技术","permalink":"https://flyreve.github.io/categories/技术/"}],"tags":[{"name":"HTML/CSS","slug":"HTML-CSS","permalink":"https://flyreve.github.io/tags/HTML-CSS/"}]},{"title":"Vue项目开发01-项目初始化","slug":"vue_Vue Cli","date":"2019-05-09T05:31:26.000Z","updated":"2020-04-24T09:14:22.536Z","comments":true,"path":"2019-05-09/cka937xb8000yxktpkwn0rj4q/","link":"","permalink":"https://flyreve.github.io/2019-05-09/cka937xb8000yxktpkwn0rj4q/","excerpt":"","text":"一，vue-cli搭建1. 安装 node(使用npm包管理工具)2. 安装 git(版本管理)3. 全局安装 webpacknpm install webapck -g webpack4.0以上需要安装webpack-cli npm install webpack-cli -g 4. 安装vue-clivue-cli已经集成了webpack-dev-server，支持热更新，安装完成后使用vue -V测试 npm install --global vue-cli 5. 构建项目vue init webpack new-project 6. 启动项目npm run dev 项目目录结构 |-- new-project |-- .babelrc |-- .editorc |-- .eslinti |-- .eslintrc.js //ES语法检查配置 |-- .gitignore |-- .postcssrc.js |-- index.html //入口页面 |-- package-lock.json |-- package.json //项目描述文件 |-- README.md |-- build //构建脚本目录 |-- config //构建配置目录 |-- node_modules //依赖的工具包 |-- src //源码目录 | |-- App.vue //页面级Vue组件 | |-- main.js //页面入口JS文件 | |-- assets //资源目录 | |-- components //组件目录 | |-- router //路由 |-- static //静态文件目录 |-- test //测试文件目录 二，基础配置1. favicon设置 a，在static存放favicon图片 b，index.html &lt;link rel=&quot;shortcut icon&quot; type=&quot;image/x-icon&quot; href=&quot;./static/favicon.ico&quot;/&gt; 2.reset.css3.使用lessnpm install less less-loader --save-dev 4.移动端配置 1像素边框、 meta标签配置、解决300ms点击延迟问题（安装fastclick模块） 6.使用iconfont,使用styl,配置别名","categories":[{"name":"技术","slug":"技术","permalink":"https://flyreve.github.io/categories/技术/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://flyreve.github.io/tags/Vue/"}]}]}